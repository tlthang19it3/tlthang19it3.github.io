<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css"
        integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous" />
    <script src="https://cdn.socket.io/socket.io-3.0.1.min.js"></script>
    <title>Document</title>
</head>

<body>
    <div class="start">
        <marquee class="font-effect-anaglyph" direction="left">Chào mừng bạn đến với video call &nbsp;&nbsp;&nbsp; Nơi
            gặp gỡ </marquee>
        <h2 class="font-effect-neon">VIDEO CALL</h2>
        <h3 class="font-effect-anaglyph" id="my-peer">Id: </h3>
        <input type="text" id="remoteId"><br>
        <button class="font-effect-anaglyph" id="btnCall">Call</button>
        <br> <br>
        <input type="text" id="txtusername"><br>
        <button class="btn" id="btnSignUp">Hihi</button>
        <br>
        <p>User online:</p>
        <ul id="ulUser">

        </ul>
    </div>
    <div id="video-call-div">
        <video id="local-video" width="300"></video>
        <video id="remote-video" width="300"></video>
        <div class="call-action-div">
            <button class="btn btn-mic"><i class="fas fa-microphone"></i></button>
            <button class="btn btn-mic"><i class="fas fa-phone"></i></button>
            <button class="btn btn-mic"><i class="fas fa-desktop"></i></button>
            <button class="btn btn-mic" id="btnVideo"><i class="fas fa-video"></i></button>
            <button class="btn btn-mic"><i class="fas fa-user-plus"></i></button>
        </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io('https://thangtran2812.herokuapp.com/');
        socket.on('connection');


        //
        socket.on('online', arrUserInfo => {
            arrUserInfo.forEach(user => {
                const { ten, peerId } = user;
                const li = document.createElement('li');
                li.setAttribute("id", user.peerId);
                li.innerHTML = user.ten;
                document.getElementById('ulUser').appendChild(li);
            });
            socket.on('moi', user => {
                const { ten, peerId } = user;
                const li = document.createElement('li');
                li.setAttribute("id", user.peerId);
                li.innerHTML = user.ten;
                document.getElementById('ulUser').appendChild(li);
            });
            //ngat ket noi
            socket.on('ngat', peerId => {
                $('#${peerId}').remove();
            })
        });
        //dk that bai
        socket.on('thatbai', () => alert('vui lòng nhập tên khac'));

        function openStream() {
            const config = {
                audio: false,
                video: true
            };
            return navigator.mediaDevices.getUserMedia(config);
        }
        //
        function playStream(isVideoTag, stream) {
            const video = document.getElementById(isVideoTag);
            video.srcObject = stream;
            video.play();
        }
        const peer = new Peer();
        peer.on('open', id => {
            $('#my-peer').append(id);
            $('#btnSignUp').click(() => {
                const username = $('#txtusername').val();
                socket.emit('chat1', { ten: username, peerId: id });
            });
        });
        //
        $('#btnCall').click(() => {
            const id = $('#remoteId').val();
            openStream()
                .then(stream => {
                    playStream('local-video', stream);
                    const call = peer.call(id, stream);
                    call.on('stream', remoteStream => playStream('remote-video', remoteStream));
                    document.getElementById('video-call-div').style.display = 'block';
                });
        });
        //
        peer.on('call', call => {
            openStream()
                .then(stream => {
                    call.answer(stream);
                    playStream('local-video', stream);
                    call.on('stream', remoteStream => playStream('remote-video', remoteStream));
                    document.getElementById('video-call-div').style.display = 'block';
                });
        });
        //
        $('#ulUser').on('click', 'li', function () {
            const id = ($(this).attr('id'));
            openStream()
                .then(stream => {
                    playStream('local-video', stream);
                    const call = peer.call(id, stream);
                    call.on('stream', remoteStream => playStream('remote-video', remoteStream));
                    document.getElementById('video-call-div').style.display = 'block';
                });
        });

        $('#btnVideo').click(() => {
            $("video").prop('muted', true);
        });
    </script>

</body>

</html>